import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";

describe("time_capsule_contract", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  // Utiliser any temporairement pour √©viter les probl√®mes de types
 const program = anchor.workspace.TimeCapsuleContract as Program<any>;

  // G√©n√©rer une paire de cl√©s pour la capsule temporelle
  const timeCapsule = anchor.web3.Keypair.generate();
  const sender = anchor.web3.Keypair.generate();

  it("Create a time capsule", async () => {
    console.log("üöÄ Test de cr√©ation de capsule temporelle...");

    // Airdrop pour les frais de transaction
    const signature = await anchor.getProvider().connection.requestAirdrop(
      sender.publicKey,
      2 * anchor.web3.LAMPORTS_PER_SOL
    );
    
    await anchor.getProvider().connection.confirmTransaction(signature);

    // Donn√©es de test
    const encryptedMessage = "Message secret de test crypt√©";
    const unlockTimestamp = new anchor.BN(Math.floor(Date.now() / 1000) + 3600); // Dans 1 heure
    const recipientEmailHash = "a".repeat(64); // Hash SHA256 simul√©
    const passwordHash = "b".repeat(64); // Hash SHA256 simul√©  
    const passwordHint = "Votre couleur pr√©f√©r√©e";
    const messageTitle = "Ma premi√®re capsule de test";

    try {
      console.log("üìù Cr√©ation de la capsule...");
      
      const tx = await program.methods
        .createTimeCapsule(
          encryptedMessage,
          unlockTimestamp,
          recipientEmailHash,
          passwordHash,
          passwordHint,
          messageTitle
        )
        .accounts({
          timeCapsule: timeCapsule.publicKey,
          sender: sender.publicKey,
          systemProgram: anchor.web3.SystemProgram.programId,
        })
        .signers([timeCapsule, sender])
        .rpc();

      console.log("‚úÖ Capsule cr√©√©e avec succ√®s !");
      console.log("üìã Transaction signature:", tx);
      console.log("üÜî Capsule ID:", timeCapsule.publicKey.toString());

      // Test de r√©cup√©ration des infos publiques
      console.log("üìñ Test de r√©cup√©ration des infos...");
      
      const capsuleInfo = await program.methods
        .getCapsuleInfo()
        .accounts({
          timeCapsule: timeCapsule.publicKey,
        })
        .view();

      console.log("üìä Infos de la capsule :");
      console.log("  - Titre:", capsuleInfo.messageTitle);
      console.log("  - Hint:", capsuleInfo.passwordHint); 
      console.log("  - Sender:", capsuleInfo.sender.toString());
      console.log("  - R√©clam√©e:", capsuleInfo.isClaimed);
      
      console.log("üéâ Tous les tests passent !");

    } catch (error) {
      console.error("‚ùå Erreur lors du test:", error);
      throw error;
    }
  });

  it("Should fail to retrieve message before unlock time", async () => {
    console.log("üîí Test de s√©curit√© (r√©cup√©ration pr√©matur√©e)...");
    
    const wrongPasswordHash = "c".repeat(64);

    try {
      await program.methods
        .retrieveMessage(wrongPasswordHash)
        .accounts({
          timeCapsule: timeCapsule.publicKey,
        })
        .rpc();

      console.log("‚ùå ERREUR: La r√©cup√©ration aurait d√ª √©chouer");
      throw new Error("Test de s√©curit√© √©chou√©");
      
    } catch (error) {
      if (error.message.includes("StillLocked")) {
        console.log("‚úÖ S√©curit√© OK: Capsule encore verrouill√©e");
      } else {
        console.log("‚úÖ S√©curit√© OK: Acc√®s refus√© (", error.message, ")");
      }
    }
  });
});